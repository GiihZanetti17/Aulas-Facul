-- 25/03/2022 --------------------
  paradigma orientação orientada a objetos
  sintaxe (linguagem java)
  convenções
 
  composição: do que um objeto é feito
  herança: quais são as superclasses e subclasses 
  encapsulamento: não precisar que outras classes saibam o funcionamento de uma função
  polimorfismo: basicamente no meio do programa poder escolher qual comando usar

  tipos permitidos int, double, bool, char
  estrutura de dados: arrays, list, map, sintaxe

   class gato{
     string nome
     string raça
     string idade
   }

  camelcase em java
  CadastroGato -> classe    cadastroGato -> variável
  NomeDeClasse

  nomes constantes tem TODAS as letras maiúsculas

  system.out.printIn("O numero" + i + "eh par");

  usar @Overide / @Override
----------------------------------
.
.
.
-- 04/03/2022 --------------------
  em Java os atributos são private -> apenas a mesma classe consegue acessar e modificar o valor desse atributo
  exemplo: private String nome;
  
  private, public, protect -> modificadores de acesso
  o método precisa ser public para que outra classe acesse esse atributo ou possa fazer modificações
  
  para ler se usa o método get
  exemplo: public void getNome(){
    return this.nome;
  }
  
  para alterar se usa o método set
  exemplo: public void setNome(String umNome){
    this.nome = umNome;
  }
 
  outros exemplos:
  public void deposita( double valorDeposito){
    this.valor = this.valor + valorDeposito;
  }
  
  public boolean retira( double valorRetirada){
    if(valorRetirada > this.valor){
        system.out("Não foi possível");
        return false;
    }
    this.valor-=valorRetirada;
    return true;
  }
  
  constructor:
  public ContaBancaria(String umNome, string umTipo){
    this.nome = umNome;
    this.valor = 0;
    this.valor = umTipo;
  }
  
  public ContaBancaria(String umNome){
    this(umNome, "normal");
  }
  
  ficaAdica: Reutilizar código para ser mais fácil a atualização
  
  toString
  @Override
  public String toString(){
    String res="";
    res+= "Classe ContaBancaria\n";
    res+= "Nome: " + this.nome+"\n";
    res+= "Valor: " + this.valor+"\n";
    res+= "Tipo: " + this.tipo+"\n";
    return res;
  }
  
  ficaAdica 2: no Eclipse tem como criar os constructors e métodos get e set automático
  
  Lab01.02 ex01 -> VAI CAIR NA PROVAA
  
-- 09/03/2022 --------------------

CREATE DATABASE teste;

CREATE TABLE casa(
  moradores int;
  numero int primary key;
  telefone varchar(10)
);

INSERT casa VALUES(3, 260, "1938090426");

DROP DATABASE teste;
  
-- 18/03/2022 --------------------

array em java

ArrayList <Gato> gatos;
gatos= new ArrayList <Gato> ();
gatos.add (new gatp)("xica");
Gato gato01= new Gato ("miau");
gatos.add (gato01);
gatos.add (gato01);
sout(gatos.get (0));
sout (gatos.get(1));

-- 01/04/2022 --------------------

Prova de LPOO
-> Herança
-> Polimorfismo
-> Classes e objetos
-> Arrays

-- 11/04/2022 --------------------

Chave estrangeira e chave primária 

Campo Matrícula (nome do atributo)

[Matrícula]|
  Registro |

Estabelecer associações ou identificar um registro de maneira única dentro da tabela -> chave primária

Chave estrangeira -> relacionamentos, pego um campo de uma tabela e insiro em outra

Alternate Key (chave alternativa) -> não são chaves primárias, não tem importância na configuração

Composite Key (chave composta) -> junção de dois atributos para criar uma chave

Chave estrangeira só é utiliza quando for 1,n ou n,n

Chave estrangeira nunca será chave primária

Quando temos um relacionamento n:n cria-se uma tabela intermediária

-- 20/04/2022 --------------------

UPDATE sorvete SET Cobertura = "Simples" WHERE Cobertura = "Cobertura Simples" 

slides do Teams Laboratorio 03 -> UPDATE, SET, SELECT, WHERE, DELETE

-- 26/04/2022 --------------------

Soma de matrizes

3 1 2  + 1 2 3 = 4 3 5
2 2 3    3 2 1   5 4 4


Produto por escalar

3 × 3 1 2 = 9 3 6 
    2 2 3   6 6 9


3 1 2     1 2   
2 2 3  ×  3 -1  = R1,1  R1,2
          0 1     R2,1  R2,2


R1,1 = 3 2 1  ×  1
                 3
                 0

R1,1 = 3×1 + 1×3 + 2×0
R1,1 = 6

A×I => IA = A

* multiplicação de matrizes não é comutativa 

A2×2 B2×2 = C2×2 
                    -->  Não necessariamente são iguais
B2×2 A2×2 = C`2×2


 - Multiplicação de Matrizes -

Primeira linha vezes a segunda coluna
Segunda linha vezes a primeira coluna

A = 2 5 × B = 3 2    =>  AB = 6+5 4  => 11 4
    3 4       1 0             9+4 6     13 6
 
° Transposta

Denotam por At a transposta da matriz A

1 2 3 T   = 1 4
4 5 6       2 5
            3 6

Teorema: Sejam A e B matrizes e K um escalar. Então, sempre que os produtos e somas
estiverem definidos, valem:

(i) (A + B)t = At + BT
(ii) (At)t = A
(iii) (kA)t = kit
(iv) (AB)t = Bt At


- Matriz [identidade] e [inversa] -

X×1 = X   => 1 é identidade
X×X^-1 = 1   => X^-1 é inverso e 1 é identidade


A×I => IA => A

I3x3 = 1 0 0
       0 1 0
       0 0 1

A×A^-1 = I

a b   x1 x2  = 1 0
c d   y1 y2    0 1

AX1 + BY1    AX2 + BY2 = 1 0
CX1 + DY1    CX2 + DY2   0 1

{ ax1+by1 = 1
  cx1+dy1 = 0

{ ax2+by2 = 0
  cx2+dy2 = 1

Ax1+by1=1 => ax1=1-by1 => x1 = 1-by1/a

Y1 = -C/|A|
X1 = D/|A|
X2 = -B/|A|
Y2 = A/|A|

A B -1(inversa) = X1 X2
C D               Y1 Y2

 - Algoritmo P/ inverter matriz 2x2 - 

Se a matriz for invertível, 

1° trocar de posição os elementos da diagonal principal
2° inverter o sinal dos demais elementos
3° dividir tudo pela determinante

Uma matriz possui inversa se seu determinante não for nulo

-- 29/04/2022 --------------------

Classe abstrata

Public abstract class Animal

Classe abstrata serve de modelo, não tem coisas funcionais apenas inicializa os atributos e métodos

Não existe Animal a = new Animal() X



Classe interface

Interface voavel {

    public void voa()
}

Implements caso queira utilizar o método voa em outra classe


Try catch  

Try é se der certo
Catch é se der erro

printStackTrace -> normalmente utilizado

Em java tem as exceptions que somos obrigados a dar um tratamento

Trowable

RuntimeException
-Nullpointer 
-StackOverflow
-Arithmetic

IOException 
- precisa tratar

Try with resource



84650000000 1 55990109011 3 00476128185 8 00842951919 5
